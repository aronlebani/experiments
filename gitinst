#!/usr/bin/racket

#lang racket

(require racket/command-line)
(require net/http-client)
(require json)

(define host "api.github.com")

(define repos-uri
  "/user/repos?per_page=100&affiliation=owner,collaborator")

(define conn (http-conn))

(define (authorization token)
  (printf "Authorization: Bearer ~a" token))

(define (get-repos token)
  (define-values (status headers res)
	(http-conn-sendrecv! conn
						 repos-uri
						 #:headers (list (authorization token))))
  (port->string res))

(define (parse res)
  (map (lambda (r)
         (hash-ref r "ssh_url"))
       (with-input-from-string
         res
         (lambda () (read-json)))))

(define (clone url path #:dry-run dry-run)
  (printf "cloning ~a into ~a\n" url path)
  (when (not dry-run)
	(define-values (sp stdout stdin stderr)
	  (parameterize ([current-directory path])
	    (subprocess #f #f #f "/usr/bin/git" "clone" url)))
	(close-output-port stdin)
	(close-input-port stdout)
	(close-input-port stderr)
	(subprocess-wait sp)
	(when (string-contains? (port->string stderr) "already exists")
	  (printf "...repository already exists"))))

(define (main)
  (define token (make-parameter null))
  (define dest (make-parameter null))
  (define dry-run (make-parameter #f))

  (command-line
   #:program "gitinstall"
   #:once-each [("-t" "--token") t "github personal access token" (token t)]
               [("-d" "--dest") d "destination directory" (dest d)]
               [("--dry-run") dr "dry run" (dry-run dr)])

  (unless (and (dest) (token))
    (exit 1))

  (http-conn-open! conn host #:ssl? #t)

  (map (lambda (repo)
		 (clone repo (dest) #:dry-run (dry-run)))
	   (parse (get-repos (token))))

  (http-conn-close! conn))

(main)
